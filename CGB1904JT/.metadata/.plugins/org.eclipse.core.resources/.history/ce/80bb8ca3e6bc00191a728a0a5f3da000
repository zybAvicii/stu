package com.jt.service;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.jt.mapper.ItemDescMapper;
import com.jt.mapper.ItemMapper;
import com.jt.pojo.Item;
import com.jt.pojo.ItemDesc;
import com.jt.vo.EasyUITable;
import com.jt.vo.SysResult;

@Service
public class ItemServiceImpl implements ItemService {
	
	@Autowired
	private ItemMapper itemMapper;
	@Autowired
    private ItemDescMapper itemDescMapper;

	@Override
	public EasyUITable findItemByPage(Integer page,Integer rows) {
		 	int  total = itemMapper.selectCount(null);//获取商品信息记录总数
		 	//起始位置0,20,40....
		 	int  start=(page-1)*rows;		 
		 	List<Item> itemList = 
		 			itemMapper.findItemByPage(start, rows);			
		 	return new EasyUITable(total,itemList);
	}
	@Transactional  //控制事务 如果不加,出异常会添加
	@Override
	public void saveItem(Item item,ItemDesc itemDesc) {
		item.setStatus(1)	//表示正常
			.setCreated(new Date())
			.setUpdated(item.getCreated());
			itemMapper.insert(item);
			//只有Item入库之后,才能获取主键id值
			//能否实现数据入库之后,将主键Id自动返回/封装
			
			//完成商品详情入库
			itemDesc.setItemId(item.getId())
					.setCreated(item.getCreated())
					.setUpdated(item.getCreated());
			itemDescMapper.insert(itemDesc);
		
	}

	@Override
	public void updateItem(Item item,ItemDesc itemDesc) {
		
		item.setUpdated(new Date());
		itemMapper.updateById(item);
		
		//ItemDesc   itemDesc属性/itemId/updated
				itemDesc.setItemId(item.getId())
						.setUpdated(item.getUpdated());
				//根据主键itemId更新数据!!!
				itemDescMapper.updateById(itemDesc);
		
	}
	@Override
	public void updateStatus(Long[] ids, int status) {
		Item item=new Item();
		item.setStatus(status)
			.setUpdated(new Date());
		//sql: update tb_item set status=2 where id in (1001,1002)
		UpdateWrapper<Item> updateWrapper = 
				new UpdateWrapper<Item>();
		List<Long> idList = 
					Arrays.asList(ids);
		
		updateWrapper.in("id",idList);
		itemMapper.update(item,updateWrapper);
		
	}
	@Transactional
	@Override
	public void deletesItem(Long[] ids) {
			List<Long> asList = 
					Arrays.asList(ids);
		itemMapper.deleteBatchIds(asList);
		itemDescMapper.deleteItemDescById(ids);
			
	}
	
	@Override
	public ItemDesc findItemDescById(Long itemId) {
		ItemDesc selectById = 
					itemDescMapper.selectById(itemId);
		return selectById;
	}
	@Override
	public Item findItemById(Item item) {
		
		return null;
	}
	
	
	
	
	
	
	
	
	
	
	
}
